### Human:Generate a TLA+ module named "Prob" with the following specifications:

Extend the module Integers.

Declare the VARIABLES p and state, and a tuple vars to contain them.

Define constant One as 100,000.

Define operators for fraction representation, multiplication, and normalization:

a / b: Create a fraction if denominator isn't zero.
a \odot b: Multiply two fractions.
Norm(x): Normalize a fraction.
Define an operator MarkovInit(Initial):

Initialize the state variable and the probability.
Define an operator MarkovNext(Done, Transition):

Represents the transition of the Markov chain.
Use the Transition matrix to determine next state and update probability.
Define constants:

Initial as "s0".
Accepting as a set containing {"I", "II", "III", "IV", "V", "VI"}.
Transition as a matrix for transitions between states, with their corresponding probabilities.
Define the specification Spec:

Combines the initial state, the next-state relation, and the weak fairness condition.
State a theorem Converges:

Ensure that the Markov chain will eventually reach an accepting state or the normalized probability becomes zero.                                  
### Assistant:
```------------------------------------------- MODULE Prob -------------------------------------------
EXTENDS Integers

VARIABLES p, state
vars == <<p, state>>

One == 100000

a / b     == IF b /= 0 THEN <<a, b>> ELSE CHOOSE x \in {} : TRUE
a \odot b == (a[1]*b[1]) / (a[2]*b[2])
Norm(x)   == x[1] \div x[2]

MarkovInit(Initial) == 
        /\ state = Initial
        /\ p     = One/1

MarkovNext(Done, Transition) == 
        /\ state \notin Done /\ Norm(p) /= 0
        /\ \E next \in DOMAIN Transition[state] : 
            /\ state' = next 
            /\ p'     = p \odot Transition[state][next]
        

Initial    == "s0"
Accepting  == {"I", "II", "III", "IV", "V", "VI"}
Transition == [s0 |-> [s1 |-> 1/2, s2 |-> 1/2],
               s1 |-> [s3 |-> 1/2, s4 |-> 1/2],
               s2 |-> [s5 |-> 1/2, s6 |-> 1/2],
               s3 |-> [s1 |-> 1/2, I  |-> 1/2],
               s4 |-> [II |-> 1/2, III|-> 1/2],
               s5 |-> [IV |-> 1/2, V  |-> 1/2],
               s6 |-> [VI |-> 1/2, s2 |-> 1/2]]
               
Spec == /\ MarkovInit(Initial) 
        /\ [][MarkovNext(Accepting, Transition)]_vars 
        /\ WF_vars(MarkovNext(Accepting, Transition))

THEOREM Converges == Spec => <>(state \in Accepting \/ Norm(p) = 0) 
====================================================================================================```
